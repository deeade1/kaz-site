version: "3.8"

services:
  db:
    container_name: db
    image: postgis/postgis:17-3.5
    ports:
      - "5433:5432"
    env_file:
      - ./.env.prod.db
    volumes:
      - db-data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "bash -c 'pg_isready -U $${POSTGRES_USER}'"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - kaz-network

  backend:
    container_name: backend
    build:
      context: .
      dockerfile: apps/docker/backend/Dockerfile
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - ./.env.prod
    volumes:
      - ./media:/home/apps/backend/media
      - ./static:/home/apps/backend/static
      - ./apps/backend:/home/apps/backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health/"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - kaz-network

  nginx:
    container_name: nginx
    build:
      context: .
      dockerfile: apps/docker/nginx/Dockerfile
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./media:/home/apps/backend/media
      - ./static:/home/apps/backend/static
      - ./apps/docker/nginx/nginx.prod.conf:/etc/nginx/conf.d/default.conf
      - ./apps/frontend/dist:/usr/share/nginx/html
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - kaz-network

  certbot:
    container_name: certbot
    image: certbot/certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: >
      /bin/sh -c 'trap exit TERM;
      while :; do
        certbot renew --webroot -w /var/www/certbot --quiet --deploy-hook "nginx -s reload";
        sleep 12h & wait $${!};
      done;'
    networks:
      - kaz-network

volumes:
  db-data:

networks:
  kaz-network:
    driver: bridge
