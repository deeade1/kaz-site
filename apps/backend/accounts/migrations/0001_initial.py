# Generated by Django 5.0.7 on 2024-12-09 19:48

import django.contrib.postgres.indexes
import django.db.models.deletion
import django.utils.timezone
import django_countries.fields
import phonenumber_field.modelfields
from django.conf import settings
from django.db import migrations, models

import core.utils.json_serializer


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Address",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "private_metadata",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        encoder=core.utils.json_serializer.CustomJsonEncoder,
                        null=True,
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        encoder=core.utils.json_serializer.CustomJsonEncoder,
                        null=True,
                    ),
                ),
                ("first_name", models.CharField(blank=True, max_length=256)),
                ("last_name", models.CharField(blank=True, max_length=256)),
                ("company_name", models.CharField(blank=True, max_length=256)),
                ("street_address_1", models.CharField(blank=True, max_length=256)),
                ("street_address_2", models.CharField(blank=True, max_length=256)),
                ("city", models.CharField(blank=True, max_length=256)),
                ("city_area", models.CharField(blank=True, max_length=128)),
                (
                    "state",
                    models.CharField(
                        choices=[
                            ("", "Select State"),
                            ("NG-AB", "Abia"),
                            ("NG-AD", "Adamawa"),
                            ("NG-AK", "Akwa Ibom"),
                            ("NG-AN", "Anambra"),
                            ("NG-BA", "Bauchi"),
                            ("NG-BY", "Bayelsa"),
                            ("NG-BE", "Benue"),
                            ("NG-BO", "Borno"),
                            ("NG-CR", "Cross River"),
                            ("NG-DE", "Delta"),
                            ("NG-EB", "Ebonyi"),
                            ("NG-ED", "Edo"),
                            ("NG-EK", "Ekiti"),
                            ("NG-EN", "Enugu"),
                            ("NG-FCT", "Federal Capital Territory"),
                            ("NG-GO", "Gombe"),
                            ("NG-IM", "Imo"),
                            ("NG-JI", "Jigawa"),
                            ("NG-KD", "Kaduna"),
                            ("NG-KN", "Kano"),
                            ("NG-KT", "Katsina"),
                            ("NG-KE", "Kebbi"),
                            ("NG-KO", "Kogi"),
                            ("NG-KW", "Kwara"),
                            ("NG-LA", "Lagos"),
                            ("NG-NA", "Nasarawa"),
                            ("NG-NI", "Niger"),
                            ("NG-OG", "Ogun"),
                            ("NG-ON", "Ondo"),
                            ("NG-OS", "Osun"),
                            ("NG-OY", "Oyo"),
                            ("NG-PL", "Plateau"),
                            ("NG-RI", "Rivers"),
                            ("NG-SO", "Sokoto"),
                            ("NG-TA", "Taraba"),
                            ("NG-YO", "Yobe"),
                            ("NG-ZA", "Zamfara"),
                        ],
                        default="",
                        max_length=100,
                    ),
                ),
                ("postal_code", models.CharField(blank=True, max_length=20)),
                ("country", django_countries.fields.CountryField(max_length=2)),
                ("country_area", models.CharField(blank=True, max_length=128)),
                (
                    "phone",
                    phonenumber_field.modelfields.PhoneNumberField(
                        blank=True,
                        db_index=True,
                        default="",
                        max_length=128,
                        region=None,
                    ),
                ),
            ],
            options={
                "ordering": ("pk",),
                "indexes": [
                    django.contrib.postgres.indexes.GinIndex(
                        fields=["private_metadata"], name="address_p_meta_idx"
                    ),
                    django.contrib.postgres.indexes.GinIndex(
                        fields=["metadata"], name="address_meta_idx"
                    ),
                    django.contrib.postgres.indexes.GinIndex(
                        fields=["first_name", "last_name", "city", "country"],
                        name="address_search_gin",
                        opclasses=[
                            "gin_trgm_ops",
                            "gin_trgm_ops",
                            "gin_trgm_ops",
                            "gin_trgm_ops",
                        ],
                    ),
                    django.contrib.postgres.indexes.GinIndex(
                        fields=[
                            "company_name",
                            "street_address_1",
                            "street_address_2",
                            "city",
                            "postal_code",
                            "phone",
                        ],
                        name="warehouse_address_search_gin",
                        opclasses=[
                            "gin_trgm_ops",
                            "gin_trgm_ops",
                            "gin_trgm_ops",
                            "gin_trgm_ops",
                            "gin_trgm_ops",
                            "gin_trgm_ops",
                        ],
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "private_metadata",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        encoder=core.utils.json_serializer.CustomJsonEncoder,
                        null=True,
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        encoder=core.utils.json_serializer.CustomJsonEncoder,
                        null=True,
                    ),
                ),
                (
                    "external_reference",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        max_length=250,
                        null=True,
                        unique=True,
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, null=True, unique=True
                    ),
                ),
                (
                    "phone_number",
                    phonenumber_field.modelfields.PhoneNumberField(
                        blank=True, max_length=128, null=True, region=None, unique=True
                    ),
                ),
                (
                    "photo",
                    models.ImageField(blank=True, null=True, upload_to="user-image"),
                ),
                ("note", models.TextField(blank=True, null=True)),
                (
                    "language_code",
                    models.CharField(
                        choices=[
                            ("af", "Afrikaans"),
                            ("ar", "Arabic"),
                            ("ar-dz", "Algerian Arabic"),
                            ("ast", "Asturian"),
                            ("az", "Azerbaijani"),
                            ("bg", "Bulgarian"),
                            ("be", "Belarusian"),
                            ("bn", "Bengali"),
                            ("br", "Breton"),
                            ("bs", "Bosnian"),
                            ("ca", "Catalan"),
                            ("ckb", "Central Kurdish (Sorani)"),
                            ("cs", "Czech"),
                            ("cy", "Welsh"),
                            ("da", "Danish"),
                            ("de", "German"),
                            ("dsb", "Lower Sorbian"),
                            ("el", "Greek"),
                            ("en", "English"),
                            ("en-au", "Australian English"),
                            ("en-gb", "British English"),
                            ("eo", "Esperanto"),
                            ("es", "Spanish"),
                            ("es-ar", "Argentinian Spanish"),
                            ("es-co", "Colombian Spanish"),
                            ("es-mx", "Mexican Spanish"),
                            ("es-ni", "Nicaraguan Spanish"),
                            ("es-ve", "Venezuelan Spanish"),
                            ("et", "Estonian"),
                            ("eu", "Basque"),
                            ("fa", "Persian"),
                            ("fi", "Finnish"),
                            ("fr", "French"),
                            ("fy", "Frisian"),
                            ("ga", "Irish"),
                            ("gd", "Scottish Gaelic"),
                            ("gl", "Galician"),
                            ("he", "Hebrew"),
                            ("hi", "Hindi"),
                            ("hr", "Croatian"),
                            ("hsb", "Upper Sorbian"),
                            ("hu", "Hungarian"),
                            ("hy", "Armenian"),
                            ("ia", "Interlingua"),
                            ("id", "Indonesian"),
                            ("ig", "Igbo"),
                            ("io", "Ido"),
                            ("is", "Icelandic"),
                            ("it", "Italian"),
                            ("ja", "Japanese"),
                            ("ka", "Georgian"),
                            ("kab", "Kabyle"),
                            ("kk", "Kazakh"),
                            ("km", "Khmer"),
                            ("kn", "Kannada"),
                            ("ko", "Korean"),
                            ("ky", "Kyrgyz"),
                            ("lb", "Luxembourgish"),
                            ("lt", "Lithuanian"),
                            ("lv", "Latvian"),
                            ("mk", "Macedonian"),
                            ("ml", "Malayalam"),
                            ("mn", "Mongolian"),
                            ("mr", "Marathi"),
                            ("ms", "Malay"),
                            ("my", "Burmese"),
                            ("nb", "Norwegian Bokmål"),
                            ("ne", "Nepali"),
                            ("nl", "Dutch"),
                            ("nn", "Norwegian Nynorsk"),
                            ("os", "Ossetic"),
                            ("pa", "Punjabi"),
                            ("pl", "Polish"),
                            ("pt", "Portuguese"),
                            ("pt-br", "Brazilian Portuguese"),
                            ("ro", "Romanian"),
                            ("ru", "Russian"),
                            ("sk", "Slovak"),
                            ("sl", "Slovenian"),
                            ("sq", "Albanian"),
                            ("sr", "Serbian"),
                            ("sr-latn", "Serbian Latin"),
                            ("sv", "Swedish"),
                            ("sw", "Swahili"),
                            ("ta", "Tamil"),
                            ("te", "Telugu"),
                            ("tg", "Tajik"),
                            ("th", "Thai"),
                            ("tk", "Turkmen"),
                            ("tr", "Turkish"),
                            ("tt", "Tatar"),
                            ("udm", "Udmurt"),
                            ("ug", "Uyghur"),
                            ("uk", "Ukrainian"),
                            ("ur", "Urdu"),
                            ("uz", "Uzbek"),
                            ("vi", "Vietnamese"),
                            ("zh-hans", "Simplified Chinese"),
                            ("zh-hant", "Traditional Chinese"),
                        ],
                        default="en-us",
                        max_length=35,
                    ),
                ),
                ("search_document", models.TextField(blank=True, default="")),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to.",
                        related_name="accounts_user_groups",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="accounts_user_permissions",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
                (
                    "addresses",
                    models.ManyToManyField(
                        blank=True, related_name="user_addresses", to="accounts.address"
                    ),
                ),
                (
                    "default_billing_address",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="accounts.address",
                    ),
                ),
                (
                    "default_shipping_address",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="accounts.address",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "ordering": ("email",),
                "permissions": (
                    ("manage_customers", "Can manage customers"),
                    ("manage_staff", "Can manage staff"),
                    ("impersonate_user", "Can impersonate user"),
                ),
            },
        ),
        migrations.CreateModel(
            name="CustomerEvent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "date",
                    models.DateTimeField(
                        default=django.utils.timezone.now, editable=False
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("ACCOUNT_CREATED", "account_created"),
                            ("ACCOUNT_ACTIVATED", "account_activated"),
                            ("ACCOUNT_DEACTIVATED", "account_deactivated"),
                            ("PASSWORD_RESET_LINK_SENT", "password_reset_link_sent"),
                            ("PASSWORD_RESET", "password_reset"),
                            ("EMAIL_CHANGED_REQUEST", "email_changed_request"),
                            ("PASSWORD_CHANGED", "password_changed"),
                            ("EMAIL_CHANGED", "email_changed"),
                            ("PLACED_ORDER", "placed_order"),
                            ("NOTE_ADDED_TO_ORDER", "note_added_to_order"),
                            ("DIGITAL_LINK_DOWNLOADED", "digital_link_downloaded"),
                            ("CUSTOMER_DELETED", "customer_deleted"),
                            ("NAME_ASSIGNED", "name_assigned"),
                            ("EMAIL_ASSIGNED", "email_assigned"),
                            ("NOTE_ADDED", "note_added"),
                        ],
                        max_length=255,
                    ),
                ),
                ("parameters", models.JSONField(blank=True, default=dict)),
                (
                    "user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="events",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ("date",),
            },
        ),
        migrations.CreateModel(
            name="CustomerNote",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("content", models.TextField()),
                ("is_public", models.BooleanField(default=True)),
                (
                    "customer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notes",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="customer_notes",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ("date",),
            },
        ),
        migrations.CreateModel(
            name="Friend",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="friends",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "friend",
                "verbose_name_plural": "friends",
            },
        ),
        migrations.CreateModel(
            name="StaffNotificationRecipient",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "staff_email",
                    models.EmailField(
                        blank=True, max_length=254, null=True, unique=True
                    ),
                ),
                ("active", models.BooleanField(default=True)),
                (
                    "user",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="staff_notification",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ("staff_email",),
            },
        ),
        migrations.AddIndex(
            model_name="user",
            index=django.contrib.postgres.indexes.GinIndex(
                fields=["private_metadata"], name="user_p_meta_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="user",
            index=django.contrib.postgres.indexes.GinIndex(
                fields=["metadata"], name="user_meta_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="user",
            index=django.contrib.postgres.indexes.GinIndex(
                fields=["email", "first_name", "last_name"],
                name="order_user_search_gin",
                opclasses=["gin_trgm_ops", "gin_trgm_ops", "gin_trgm_ops"],
            ),
        ),
        migrations.AddIndex(
            model_name="user",
            index=django.contrib.postgres.indexes.GinIndex(
                fields=["search_document"],
                name="user_search_gin",
                opclasses=["gin_trgm_ops"],
            ),
        ),
    ]
